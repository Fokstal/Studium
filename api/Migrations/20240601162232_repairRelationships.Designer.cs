// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240601162232_repairRelationships")]
    partial class repairRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("api.Models.Entities.GradeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GradeModelEntityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentEntityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GradeModelEntityId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("api.Models.Entities.GradeTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GradeType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Practice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ControlWork"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lecture"
                        });
                });

            modelBuilder.Entity("api.Models.GradeModelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SetDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubjectEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubjectEntityId");

                    b.HasIndex("TypeId");

                    b.ToTable("GradeModel");
                });

            modelBuilder.Entity("api.Models.GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuditoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CuratorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("api.Models.PassportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScanFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PersonEntityId")
                        .IsUnique();

                    b.ToTable("Passport");
                });

            modelBuilder.Entity("api.Models.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ViewGradeList"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ViewGrade"
                        },
                        new
                        {
                            Id = 3,
                            Name = "EditGrade"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ViewGroup"
                        },
                        new
                        {
                            Id = 5,
                            Name = "EditGroup"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ViewPassportList"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ViewPassport"
                        },
                        new
                        {
                            Id = 8,
                            Name = "EditPassport"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ViewPersonList"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ViewPerson"
                        },
                        new
                        {
                            Id = 11,
                            Name = "EditPerson"
                        },
                        new
                        {
                            Id = 12,
                            Name = "ViewStudentList"
                        },
                        new
                        {
                            Id = 13,
                            Name = "ViewStudent"
                        },
                        new
                        {
                            Id = 14,
                            Name = "EditStudent"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ViewSubjectList"
                        },
                        new
                        {
                            Id = 16,
                            Name = "ViewSubject"
                        },
                        new
                        {
                            Id = 17,
                            Name = "EditSubject"
                        },
                        new
                        {
                            Id = 18,
                            Name = "ViewUser"
                        },
                        new
                        {
                            Id = 19,
                            Name = "RegisterUser"
                        },
                        new
                        {
                            Id = 20,
                            Name = "EditUser"
                        });
                });

            modelBuilder.Entity("api.Models.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Sex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("api.Models.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secretar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Curator"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("api.Models.RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleEntityId", "PermissionEntityId");

                    b.HasIndex("PermissionEntityId");

                    b.ToTable("RolePermissionEntity");

                    b.HasData(
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 1
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 2
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 3
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 4
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 5
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 6
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 7
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 8
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 9
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 10
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 11
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 12
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 13
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 14
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 15
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 16
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 17
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 18
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 19
                        },
                        new
                        {
                            RoleEntityId = 1,
                            PermissionEntityId = 20
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 1
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 2
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 3
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 4
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 5
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 6
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 7
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 8
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 9
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 10
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 11
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 12
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 13
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 14
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 15
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 16
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 17
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 18
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 19
                        },
                        new
                        {
                            RoleEntityId = 2,
                            PermissionEntityId = 20
                        },
                        new
                        {
                            RoleEntityId = 3,
                            PermissionEntityId = 2
                        },
                        new
                        {
                            RoleEntityId = 3,
                            PermissionEntityId = 4
                        },
                        new
                        {
                            RoleEntityId = 3,
                            PermissionEntityId = 10
                        },
                        new
                        {
                            RoleEntityId = 3,
                            PermissionEntityId = 13
                        },
                        new
                        {
                            RoleEntityId = 3,
                            PermissionEntityId = 16
                        },
                        new
                        {
                            RoleEntityId = 4,
                            PermissionEntityId = 2
                        },
                        new
                        {
                            RoleEntityId = 4,
                            PermissionEntityId = 3
                        },
                        new
                        {
                            RoleEntityId = 4,
                            PermissionEntityId = 4
                        },
                        new
                        {
                            RoleEntityId = 4,
                            PermissionEntityId = 10
                        },
                        new
                        {
                            RoleEntityId = 4,
                            PermissionEntityId = 13
                        },
                        new
                        {
                            RoleEntityId = 4,
                            PermissionEntityId = 16
                        },
                        new
                        {
                            RoleEntityId = 5,
                            PermissionEntityId = 2
                        },
                        new
                        {
                            RoleEntityId = 5,
                            PermissionEntityId = 4
                        },
                        new
                        {
                            RoleEntityId = 5,
                            PermissionEntityId = 7
                        },
                        new
                        {
                            RoleEntityId = 5,
                            PermissionEntityId = 10
                        },
                        new
                        {
                            RoleEntityId = 5,
                            PermissionEntityId = 13
                        },
                        new
                        {
                            RoleEntityId = 5,
                            PermissionEntityId = 16
                        });
                });

            modelBuilder.Entity("api.Models.StudentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GroupEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RemovedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupEntityId");

                    b.HasIndex("PersonEntityId")
                        .IsUnique();

                    b.ToTable("Student");
                });

            modelBuilder.Entity("api.Models.SubjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("GroupEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupEntityId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("api.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a34eff4d-f040-23a8-f15d-3f4f01ab62ea"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "AdminBase",
                            LastName = "",
                            Login = "admin",
                            MiddleName = "",
                            PasswordHash = "wNT47n/qyBSao7WnTCiZurLCZMmiEDmOzNKe0fuAh68syTJE8Yu1/bOhE8OA+KlRzHgc4DbrAwC20oJ2ruAYRg=="
                        },
                        new
                        {
                            Id = new Guid("1144b240-4126-78dd-dd4f-93b6c9190dd4"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "SecretarBase",
                            LastName = "",
                            Login = "secretar",
                            MiddleName = "",
                            PasswordHash = "ldntahdGhOPXDqs16vPWLoGYILz5TLDlTlrqlh2sI56JzrXd6MXx4a4vrD+sHSEoWZ0KdjSczeERVLKl+oY6YQ=="
                        },
                        new
                        {
                            Id = new Guid("08bfaf3b-2a88-102d-1330-93a1b8433f50"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "CuratorBase",
                            LastName = "",
                            Login = "curator",
                            MiddleName = "",
                            PasswordHash = "tiMq2aFb7mOs35MsukDafs+e0fJVAJFcPykiCirdGYGZkqXA4uSzBYCBQk/jWGTfEgBLNCol0UcTAEdnXUEENw=="
                        },
                        new
                        {
                            Id = new Guid("b4d821a3-e305-26ef-0495-9847b36d171e"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "TeacherBase",
                            LastName = "",
                            Login = "teacher",
                            MiddleName = "",
                            PasswordHash = "80n2TDMphhuzv9mfZnEwvnqrLn7R7ffGZt0WNGNSSuunsRpYJDy+d2/1cZDkw6POrZDyWw8Geuek9NMUoL5duw=="
                        },
                        new
                        {
                            Id = new Guid("3705df06-8119-37a2-d0ed-11472fae7c94"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "StudentBase",
                            LastName = "",
                            Login = "student",
                            MiddleName = "",
                            PasswordHash = "jb7vuZcUaY7Tl3gzhaNc880qfvwoCAaGvCGevz+DEI+glffW/gH4fOpQUyJ42/r3QbOQAsqyyS85E1hBoFQG1w=="
                        });
                });

            modelBuilder.Entity("api.Models.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserEntityId", "RoleEntityId");

                    b.HasIndex("RoleEntityId");

                    b.ToTable("UserRoleEntity");

                    b.HasData(
                        new
                        {
                            UserEntityId = new Guid("a34eff4d-f040-23a8-f15d-3f4f01ab62ea"),
                            RoleEntityId = 1
                        },
                        new
                        {
                            UserEntityId = new Guid("1144b240-4126-78dd-dd4f-93b6c9190dd4"),
                            RoleEntityId = 2
                        },
                        new
                        {
                            UserEntityId = new Guid("08bfaf3b-2a88-102d-1330-93a1b8433f50"),
                            RoleEntityId = 3
                        },
                        new
                        {
                            UserEntityId = new Guid("b4d821a3-e305-26ef-0495-9847b36d171e"),
                            RoleEntityId = 4
                        },
                        new
                        {
                            UserEntityId = new Guid("3705df06-8119-37a2-d0ed-11472fae7c94"),
                            RoleEntityId = 5
                        });
                });

            modelBuilder.Entity("api.Models.Entities.GradeEntity", b =>
                {
                    b.HasOne("api.Models.GradeModelEntity", null)
                        .WithMany("GradeEntityList")
                        .HasForeignKey("GradeModelEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.GradeModelEntity", b =>
                {
                    b.HasOne("api.Models.SubjectEntity", null)
                        .WithMany("GradeModelEntityList")
                        .HasForeignKey("SubjectEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Entities.GradeTypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("api.Models.PassportEntity", b =>
                {
                    b.HasOne("api.Models.PersonEntity", null)
                        .WithOne("PassportEntity")
                        .HasForeignKey("api.Models.PassportEntity", "PersonEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.RolePermissionEntity", b =>
                {
                    b.HasOne("api.Models.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.StudentEntity", b =>
                {
                    b.HasOne("api.Models.GroupEntity", null)
                        .WithMany("StudentEntityList")
                        .HasForeignKey("GroupEntityId");

                    b.HasOne("api.Models.PersonEntity", null)
                        .WithOne("StudentEntity")
                        .HasForeignKey("api.Models.StudentEntity", "PersonEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.SubjectEntity", b =>
                {
                    b.HasOne("api.Models.GroupEntity", null)
                        .WithMany("SubjectEntityList")
                        .HasForeignKey("GroupEntityId");
                });

            modelBuilder.Entity("api.Models.UserRoleEntity", b =>
                {
                    b.HasOne("api.Models.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.GradeModelEntity", b =>
                {
                    b.Navigation("GradeEntityList");
                });

            modelBuilder.Entity("api.Models.GroupEntity", b =>
                {
                    b.Navigation("StudentEntityList");

                    b.Navigation("SubjectEntityList");
                });

            modelBuilder.Entity("api.Models.PersonEntity", b =>
                {
                    b.Navigation("PassportEntity");

                    b.Navigation("StudentEntity");
                });

            modelBuilder.Entity("api.Models.SubjectEntity", b =>
                {
                    b.Navigation("GradeModelEntityList");
                });
#pragma warning restore 612, 618
        }
    }
}
