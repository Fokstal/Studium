 Архитектура - нормальная тема

----------------------------------------

ХОРОШАЯ архитектура:

System is Effective(security, reliable, powerfull, scale)
    &&
    Гибкость
    Расширяемость
    Тестируемость
    Переиспользование кода

    /

ПЛОХАЯ архитектура (дизайн):

Его тяжело изменить, поскольку любое изменение влияет на слишком большое количество других частей системы. (Жесткость, Rigidity).
При внесении изменений неожиданно ломаются другие части системы. (Хрупкость, Fragility).
Код тяжело использовать повторно в другом приложении, поскольку его слишком тяжело «выпутать» из текущего приложения. (Неподвижность, Immobility).


------------------------------------------

Хорошая архитектура это, прежде всего, модульная/блочная архитектура.





ОПИСАНИЕ:

Название - Studium (Студиум)
Тип - База данных учащихся =>
    Список учащихся (выборка, фильтрация, CRUD)

    Электронный журнал (фильтрация, CRUD)

    Документы:
        - конструктор отчётов (создание шаблона отчёта, вывод отчётов в файл);
        - ?скан документов через AI и занос данных в бд.

    Разделение ролей:
        - админ \ полный доступ;
    /   - секретарь \ доступ к учащимся + журналу - CRUD + док-ты;
    \   - куратор \ доступ к учащимся (своей группы) + журналу (своей группы) - CRUD + док-ты;
        - преподаватель \ доступ к журналу (свой предмет);
        - учащийся \ чтение журнала.

    Защита данных - каким-то образом
    * В целях защиты можно разделить ПО на две части:
        - 1-я локальная - все действия по ролям;
        - 2-я глобальная - только чтение журнала.

    Статистика учащегося?
    Представляет собой свод по учащемуся:
        - успеваемость;
        - посещение (благодаря пропускной системе можно подгрузить);
        - финансы;
        - другие сведения.


ТЕХНОЛОГИИ:

    Front:
        - HTML, CSS;
        - JS, TS;
        - Библиотека классов (Prime, Material, BS5);
        - React;
        - другие библиотеки.

    Back:
        - C#;
        - ASP.NET Core;
        - EF Core;
        - другие библиотеки.

    DB:
        - Postgre (для учащихся и успеваемости);
        - MongoDB? (для отчётов).

    Another:
        - Git;
        - Nginx? (для крутозны);
        - Docker? (для крутозны);
        - Python? (для AI);
        - другие.

    Pattern - MVC.


АРХИТЕКТУРА:
    Основная - 3 контейнера докерских
    FRONT + BACK + DB:
    Структура:

        Front запрашивает данные с Back
        Back берёт данные с Db
        Back обрабатывает данные и возвращает на Front
        Front принимает и отображает.


    Если будет AI = +1 контейнер с Python, схема работы:
        Front загружает фотку и отправляет на Back C#
        Back C# фотку ~как-то обрабатывает и~ отправляет на Module Python
        Module Python возвращает JSON файл с данными и отправляет на Back C#
        Back C# отправляет данные на Front
        Front заносит данные

        + сделать интерфейс для самостоятельного обучения, пример:

            Вышла новая структура документов учащихся - проблема, ибо AI не поймет где есть что.

            РЕШЕНИЕ:
                Закидываем в проггу 1001 фотку
                К каждой фотографии прикладываем выходные данные (ФИО, даты и т.п.)

ПРОЧИЕ ТРЕБОВАНИЯ, но ОЧЕНЬ ВАЖНЫЕ:

    - адаптивность под мобилки;
    - запуск даже на Internet Explorer 1.0
    - скорость - ноу говнокод;
    - устойчивость под неопытных пользователей;
    - сделать инструкцию.



